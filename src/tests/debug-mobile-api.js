// Script simplificado para depurar as APIs mobile
const axios = require('axios');

// Configura√ß√£o da base URL para testes
const BASE_URL = process.env.TEST_API_BASE_URL || 'http://localhost:3000/api';

// Dados para teste
const ADMIN_USER = {
  email: 'admin_mobile_test@teste.com',
  password: 'senha123'
};

const EMPLOYEE_USER = {
  email: 'funcionario_mobile_test@teste.com',
  password: 'senha123'
};

// Fun√ß√£o para obter a data atual formatada (YYYY-MM-DD)
const getTodayFormatted = () => {
  const today = new Date();
  return today.toISOString().split('T')[0]; // formato YYYY-MM-DD
};

async function debugMobileAPI() {
  console.log('üîç Depurando API Mobile para Admin');
  
  try {
    // Parte 1: Login como admin
    console.log('\nüîë Autenticando como administrador...');
    const adminAuthResponse = await axios.post(`${BASE_URL}/mobile-auth`, ADMIN_USER);
    const adminToken = adminAuthResponse.data.token;
    const adminUser = adminAuthResponse.data.user;
    
    console.log(`‚úÖ Admin autenticado: ${adminUser.name} (${adminUser.role})`);
    console.log(`üìå Admin companyId: ${adminUser.companyId}`);
    
    // Login como funcion√°rio
    console.log('\nüîë Autenticando como funcion√°rio...');
    const employeeAuthResponse = await axios.post(`${BASE_URL}/mobile-auth`, EMPLOYEE_USER);
    const employeeToken = employeeAuthResponse.data.token;
    const employeeUser = employeeAuthResponse.data.user;
    
    console.log(`‚úÖ Funcion√°rio autenticado: ${employeeUser.name} (${employeeUser.role})`);
    console.log(`üìå Funcion√°rio companyId: ${employeeUser.companyId}`);
    
    if (adminUser.companyId !== employeeUser.companyId) {
      console.log('‚ö†Ô∏è Admin e funcion√°rio n√£o est√£o na mesma empresa!');
    } else {
      console.log('‚úÖ Admin e funcion√°rio est√£o na mesma empresa:', adminUser.companyId);
    }
    
    // Parte 2: Obter todos os usu√°rios da empresa (usando admin)
    console.log('\nüë• Buscando usu√°rios da empresa...');
    
    try {
      const usersResponse = await axios.get(
        `${BASE_URL}/users`,
        { headers: { Authorization: `Bearer ${adminToken}` } }
      );
      
      const usersInCompany = usersResponse.data.users.filter(
        user => user.companyId === adminUser.companyId
      );
      
      console.log(`‚úÖ Encontrados ${usersInCompany.length} usu√°rios na empresa:`);
      usersInCompany.forEach(user => {
        console.log(`  - ${user.name} (${user.id}) - ${user.role}`);
      });
    } catch (error) {
      console.log('‚ùå Erro ao buscar usu√°rios:', error.message);
    }
    
    // Parte 3: Criar registro de horas como funcion√°rio
    console.log('\n‚è±Ô∏è Criando registro de horas como funcion√°rio...');
    
    const dataFormatada = getTodayFormatted();
    console.log(`üìÖ Data do teste: ${dataFormatada}`);
    
    let newEntryId = null;
    
    try {
      const newEntryData = {
        date: dataFormatada,
        startTime: `${dataFormatada}T10:00:00`,
        endTime: `${dataFormatada}T11:30:00`,
        observation: `Teste de depura√ß√£o ${Date.now()}`,
        project: 'Projeto Depura√ß√£o API'
      };
      
      const createResponse = await axios.post(
        `${BASE_URL}/mobile-time-entries`,
        newEntryData,
        { headers: { Authorization: `Bearer ${employeeToken}` } }
      );
      
      newEntryId = createResponse.data.timeEntry.id;
      console.log(`‚úÖ Registro criado com ID: ${newEntryId}`);
    } catch (error) {
      console.log('‚ùå Erro ao criar registro:', error.message);
      if (error.response && error.response.data) {
        console.log('Resposta:', error.response.data);
      }
    }
    
    // Parte 4: Verificar entradas do pr√≥prio funcion√°rio
    console.log('\nüëÄ Verificando se o funcion√°rio v√™ seu pr√≥prio registro...');
    
    try {
      const employeeViewResponse = await axios.get(
        `${BASE_URL}/mobile-time-entries`,
        { 
          headers: { Authorization: `Bearer ${employeeToken}` },
          params: { 
            startDate: dataFormatada,
            endDate: dataFormatada
          }
        }
      );
      
      const employeeEntries = employeeViewResponse.data.timeEntries;
      console.log(`‚úÖ Funcion√°rio v√™ ${employeeEntries.length} registros`);
      
      if (employeeEntries.length > 0) {
        console.log('üìã IDs dos registros vistos pelo funcion√°rio:');
        employeeEntries.forEach(entry => {
          const isNewEntry = newEntryId && entry.id === newEntryId;
          console.log(`  - ${entry.id}${isNewEntry ? ' (registro rec√©m-criado)' : ''}`);
        });
      }
    } catch (error) {
      console.log('‚ùå Erro na consulta do funcion√°rio:', error.message);
    }
    
    // Parte 5: Verificar como Admin - Tentativa 1 (padr√£o)
    console.log('\nüëÄ Verificando se o admin v√™ os registros (tentativa 1 - padr√£o)...');
    
    try {
      const adminViewResponse = await axios.get(
        `${BASE_URL}/mobile-time-entries`,
        { 
          headers: { Authorization: `Bearer ${adminToken}` },
          params: { 
            startDate: dataFormatada,
            endDate: dataFormatada
          }
        }
      );
      
      const adminEntries = adminViewResponse.data.timeEntries;
      console.log(`Admin v√™ ${adminEntries.length} registros`);
      
      const foundNewEntry = adminEntries.some(entry => newEntryId && entry.id === newEntryId);
      
      if (foundNewEntry) {
        console.log('‚úÖ Admin consegue ver o registro rec√©m-criado!');
      } else {
        console.log('‚ùå Admin N√ÉO consegue ver o registro rec√©m-criado');
      }
      
      if (adminEntries.length > 0) {
        console.log('üìã IDs dos registros vistos pelo admin:');
        adminEntries.forEach(entry => {
          console.log(`  - ${entry.id} (Usuario: ${entry.user?.name || 'N/A'})`);
        });
      }
      
      console.log('üìä Estat√≠sticas retornadas para o admin:');
      console.log(adminViewResponse.data.stats);
      
    } catch (error) {
      console.log('‚ùå Erro na consulta do admin:', error.message);
      if (error.response && error.response.data) {
        console.log('Resposta:', error.response.data);
      }
    }
    
    // Parte 6: Verificar como Admin - Tentativa 2 (com userId expl√≠cito)
    console.log('\nüëÄ Verificando se o admin v√™ os registros (tentativa 2 - com userId)...');
    
    try {
      const adminViewResponse = await axios.get(
        `${BASE_URL}/mobile-time-entries`,
        { 
          headers: { Authorization: `Bearer ${adminToken}` },
          params: { 
            startDate: dataFormatada,
            endDate: dataFormatada,
            userId: employeeUser.id
          }
        }
      );
      
      const adminEntries = adminViewResponse.data.timeEntries;
      console.log(`Admin v√™ ${adminEntries.length} registros do funcion√°rio espec√≠fico`);
      
      const foundNewEntry = adminEntries.some(entry => newEntryId && entry.id === newEntryId);
      
      if (foundNewEntry) {
        console.log('‚úÖ Admin consegue ver o registro rec√©m-criado com userId expl√≠cito!');
      } else {
        console.log('‚ùå Admin N√ÉO consegue ver o registro rec√©m-criado mesmo com userId expl√≠cito');
      }
      
    } catch (error) {
      console.log('‚ùå Erro na consulta do admin com userId:', error.message);
      if (error.response && error.response.data) {
        console.log('Resposta:', error.response.data);
      }
    }
    
    // Parte 7: Cleanup - Remover o registro criado
    if (newEntryId) {
      console.log('\nüßπ Removendo registro de teste...');
      
      try {
        await axios.delete(
          `${BASE_URL}/mobile-time-entries/${newEntryId}`,
          { headers: { Authorization: `Bearer ${employeeToken}` } }
        );
        console.log('‚úÖ Registro removido com sucesso');
      } catch (error) {
        console.log('‚ùå Erro ao remover registro:', error.message);
      }
    }
    
    console.log('\n‚úÖ Depura√ß√£o conclu√≠da!');
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

// Executar o teste
debugMobileAPI().catch(console.error); 